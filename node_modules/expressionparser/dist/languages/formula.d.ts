import { ExpressionThunk, TermDelegate, InfixOps, ExpressionValue, ExpressionArray } from "../ExpressionParser";
export interface FunctionOps {
    [op: string]: (...args: ExpressionThunk[]) => ExpressionValue;
}
export declare const formula: (termDelegate: TermDelegate) => {
    ESCAPE_CHAR: string;
    INFIX_OPS: InfixOps;
    PREFIX_OPS: FunctionOps;
    PRECEDENCE: string[][];
    LITERAL_OPEN: string;
    LITERAL_CLOSE: string;
    GROUP_OPEN: string;
    GROUP_CLOSE: string;
    SEPARATOR: string;
    SYMBOLS: string[];
    AMBIGUOUS: {
        "-": string;
    };
    SURROUNDING: {
        ARRAY: {
            OPEN: string;
            CLOSE: string;
        };
    };
    termDelegate: (term: string) => string | number | boolean | ExpressionThunk | ExpressionArray<ExpressionValue> | {
        [key: string]: ExpressionValue;
    };
    isCaseInsensitive: boolean;
    descriptions: {
        op: string;
        fix: string;
        sig: string[];
        text: string;
    }[];
};
