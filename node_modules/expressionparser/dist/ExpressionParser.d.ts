export interface ExpressionArray<T> extends Array<T> {
    isArgumentsArray?: boolean;
}
export interface ArgumentsArray extends ExpressionArray<ExpressionThunk> {
    isArgumentsArray: true;
}
export declare const isArgumentsArray: (args: ExpressionValue) => args is ArgumentsArray;
export declare type ValuePrimitive = number | boolean | string;
export declare type ExpressionValue = ValuePrimitive | ArgumentsArray | ExpressionArray<ExpressionValue> | {
    [key: string]: ExpressionValue;
} | ExpressionThunk;
export declare type ExpressionThunk = () => ExpressionValue;
export declare type TermDelegate = (term: string) => ExpressionValue;
export declare type Delegate = (...args: ExpressionValue[]) => ExpressionValue;
declare type Infixer<T> = (token: string, lhs: T, rhs: T) => T;
declare type Prefixer<T> = (token: string, rhs: T) => T;
declare type Terminator<T> = (token: string) => T;
export declare type PrefixOp = (expr: ExpressionThunk) => ExpressionValue;
export interface PrefixOps {
    [op: string]: PrefixOp;
}
export declare type InfixOp = (a: ExpressionThunk, b: ExpressionThunk) => ExpressionValue;
export interface InfixOps {
    [op: string]: InfixOp;
}
export interface ExpressionParserOptions {
    AMBIGUOUS: {
        [op: string]: string;
    };
    PREFIX_OPS: PrefixOps;
    INFIX_OPS: InfixOps;
    ESCAPE_CHAR: string;
    LITERAL_OPEN: string;
    LITERAL_CLOSE: string;
    GROUP_OPEN: string;
    GROUP_CLOSE: string;
    SYMBOLS: string[];
    PRECEDENCE: string[][];
    SEPARATOR: string;
    termDelegate: TermDelegate;
    SURROUNDING?: {
        [token: string]: {
            OPEN: string;
            CLOSE: string;
        };
    };
    isCaseInsensitive?: boolean;
}
declare class ExpressionParser {
    options: ExpressionParserOptions;
    surroundingOpen: {
        [token: string]: boolean;
    };
    surroundingClose: {
        [token: string]: {
            OPEN: string;
            ALIAS: string;
        };
    };
    symbols: {
        [token: string]: string;
    };
    LIT_CLOSE_REGEX?: RegExp;
    LIT_OPEN_REGEX?: RegExp;
    constructor(options: ExpressionParserOptions);
    resolveCase(key: string): string;
    resolveAmbiguity(token: string): string;
    isSymbol(char: string): boolean;
    getPrefixOp(op: string): PrefixOp;
    getInfixOp(op: string): InfixOp;
    getPrecedence(op: string): number;
    tokenize(expression: string): string[];
    tokensToRpn(tokens: string[]): string[];
    evaluateRpn<T>(stack: string[], infixer: Infixer<T>, prefixer: Prefixer<T>, terminator: Terminator<T>): T;
    rpnToExpression(stack: string[]): string;
    rpnToTokens(stack: string[]): string[];
    rpnToThunk(stack: string[]): ExpressionThunk;
    rpnToValue(stack: string[]): ExpressionValue;
    thunkToValue(thunk: ExpressionThunk): ExpressionValue;
    expressionToRpn(expression: string): string[];
    expressionToThunk(expression: string): ExpressionThunk;
    expressionToValue(expression: string): ExpressionValue;
    tokensToValue(tokens: string[]): ExpressionValue;
    tokensToThunk(tokens: string[]): ExpressionThunk;
}
export default ExpressionParser;
